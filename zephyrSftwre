getgenv().autoTap = false;
getgenv().autoRebirth = false;
getgenv().buyEgg = false;


local remotepath = game:GetService("ReplicatedStorage").Aero.AeroRemoteServices;

local clickMod = require(game:GetService("Players")["dababyletsgooooo12_3"].PlayerScripts.Aero.Controllers.UI.Click)


function doTap()
   spawn(function()
       while getgenv().autoTap == true do
        clickMod:Click()
           wait()
       end
   end)
end


function autoRebirth(rebirthAmount)
spawn(function()
   while getgenv().autoRebirth == true do
       remotepath.RebirthService.BuyRebirths:FireServer(rebirthAmount)
       wait()
    end
end)
end



function buyEgg(eggType)
spawn(function()
    while wait() do
        if not getgenv().buyEgg then break end;
        remotepath.EggService.Purchase:FireServer(eggType)
     end
 end)
end

function getCurrentPlayerPOS()
    local plyr = game.Players.LocalPlayer;
    if plyr.Character then
        return plyr.Character.HumanoidRootPart.Position;
    end
        return false;
end


function teleportTO(placeCFrame)
    local plyr = game.Players.LocalPlayer;
    if plyr.Character then
        plyr.Character.HumanoidRootPart.CFrame = placeCFrame;
    end
end

function teleportWorld(world)
    if game:GetService("Workspace").Worlds:FindFirstChild(world) then
        teleportTO(game:GetService("Workspace").Worlds[world].Teleport.CFrame)
    end
end





local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow("Clicking Madness!") -- Creates the window

local b = w:CreateFolder("Farming")

local c = w:CreateFolder("Pet")

local d = w:CreateFolder("Teleport")

b:DestroyGui()



b:Toggle("Auto Tap",function(bool)
    getgenv().autoTap = bool
    print('Auto Tap is: ', bool);
    if bool then
        doTap();
    end
end)


local selectedRebirth;
b:Dropdown("Rebirth Amount",{"1","10","100","1000","10000","100000","1000000","10000000","100000000","1000000000","10000000000"},true,function(value) --true/false, replaces the current title "Dropdown" with the option that t
    selectedRebirth = value;
    print(value)
end)
b:Toggle("Auto Rebirth",function(bool)
    getgenv().autoRebirth = bool
    print('Auto Rebirth is: ', bool);
    if bool and selectedRebirth then
        autoRebirth(selectedRebirth);
    end
end)


c:Toggle("Auto Buy Pet",function(bool)
    getgenv().buyEgg = bool
    print('Auto Buy Pet is: ', bool);
    if bool then
        buyEgg('basic');
    end
end)

local selectedWorld;
d:Dropdown("World",{"Lava","Desert","Ocean","Winter","Toxic","Candy","Forest","Storm","Blocks","Space","Dominus","Infinity","Future","City","Moon","Fire"},true,function(value) --true/false, replaces the current title "Dropdown" with the option that t
    selectedWorld = value;
    print(value)
end)

d:Button("Teleport Selected",function()
    if selectedWorld then
        teleportWorld(selectedWorld)
    end
end)

-- b:Label("Pretty Useless NGL",{
--     TextSize = 25; -- Self Explaining
--     TextColor = Color3.fromRGB(255,255,255); -- Self Explaining
--     BgColor = Color3.fromRGB(69,69,69); -- Self Explaining
    
-- }) 

-- b:Button("Button",function()
--     print("Elym Winning")
-- end)

-- b:Toggle("Toggle",function(bool)
--     shared.toggle = bool
--     print(shared.toggle)
-- end)

-- b:Slider("Slider",{
--     min = 10; -- min value of the slider
--     max = 50; -- max value of the slider
--     precise = true; -- max 2 decimals
-- },function(value)
--     print(value)
-- end)

-- b:Dropdown("Dropdown",{"A","B","C"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
--     print(mob)
-- end)

-- b:Bind("Bind",Enum.KeyCode.C,function() --Default bind
--     print("Yes")
-- end)

-- b:ColorPicker("ColorPicker",Color3.fromRGB(255,0,0),function(color) --Default color
--     print(color)
-- end)

-- b:Box("Box","number",function(value) -- "number" or "string"
--     print(value)
-- end)





-- local mod = require(game:GetService("Players")["dababyletsgooooo12_3"].PlayerScripts.Aero.Controllers.UI.Pets)

-- print("--UPVALUES--")
-- for i,v in pairs(getupvalues(mod.CalculatePetCapacity)) do
--     print(i,v);
-- end
-- print("---")
-- print("--CONSTANTS--")
-- for i,v in pairs(getconstants(mod.CalculatePetCapacity)) do
--     print(i,v);
-- end
